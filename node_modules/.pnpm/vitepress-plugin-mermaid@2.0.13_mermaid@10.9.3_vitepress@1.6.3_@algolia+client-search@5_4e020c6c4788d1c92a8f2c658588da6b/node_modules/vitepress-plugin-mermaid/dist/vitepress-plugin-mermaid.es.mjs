const m = (e) => {
  const r = e.renderer.rules.fence.bind(e.renderer.rules);
  e.renderer.rules.fence = (a, i, t, s, o) => {
    const n = a[i];
    if (n.info.trim() === "mermaid")
      try {
        return `
      <Suspense> 
      <template #default>
      <Mermaid id="mermaid-${i}"  graph="${encodeURIComponent(
          n.content
        )}"></Mermaid>
      </template>
        <!-- loading state via #fallback slot -->
        <template #fallback>
          Loading...
        </template>
      </Suspense>`;
      } catch (l) {
        return `<pre>${l}</pre>`;
      }
    return n.info.trim() === "mmd" && (a[i].info = "mermaid"), r(a, i, t, s, o);
  };
}, d = {
  //We set loose as default here because is needed to load images
  securityLevel: "loose",
  startOnLoad: !1
};
function p(e) {
  const r = {
    ...d,
    ...e
  }, a = "virtual:mermaid-config", i = "\0" + a;
  return {
    name: "vite-plugin-mermaid",
    enforce: "post",
    transform(t, s) {
      if (s.includes("vitepress/dist/client/app/index.js"))
        return t = `
import Mermaid from 'vitepress-plugin-mermaid/Mermaid.vue';
` + t, t = t.replace(
          "// install global components",
          `// install global components
		app.component('Mermaid', Mermaid);
`
        ), {
          code: t,
          map: null
          // provide source map if available
        };
    },
    async resolveId(t) {
      if (t === a)
        return i;
    },
    async load(t) {
      if (t === i)
        return `export default ${JSON.stringify(r)};`;
    }
  };
}
const u = (e) => {
  e.markdown || (e.markdown = {});
  const r = e.markdown.config || (() => {
  });
  return e.markdown.config = (...a) => {
    m(...a), r(...a);
  }, e.vite || (e.vite = {}), e.vite.plugins || (e.vite.plugins = []), e.vite.plugins.push(p(e.mermaid)), e.vite.optimizeDeps || (e.vite.optimizeDeps = {}), e.vite.optimizeDeps = {
    ...e.vite.optimizeDeps,
    include: [
      "@braintree/sanitize-url",
      "dayjs",
      "debug",
      "cytoscape-cose-bilkent",
      "cytoscape"
    ]
  }, e.vite.resolve || (e.vite.resolve = {}), e.vite.resolve.alias || (e.vite.resolve.alias = {}), e.vite.resolve.alias = {
    ...e.vite.resolve.alias,
    "dayjs/plugin/advancedFormat.js": "dayjs/esm/plugin/advancedFormat",
    "dayjs/plugin/customParseFormat.js": "dayjs/esm/plugin/customParseFormat",
    "dayjs/plugin/isoWeek.js": "dayjs/esm/plugin/isoWeek",
    "cytoscape/dist/cytoscape.umd.js": "cytoscape/dist/cytoscape.esm.js"
  }, e;
};
export {
  m as MermaidMarkdown,
  p as MermaidPlugin,
  u as withMermaid
};
